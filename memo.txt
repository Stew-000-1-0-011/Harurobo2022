
・座標系は機体前方をy軸、ｙ軸正を向き水平に右手側をx軸、その時の上方向をz軸とした。

・NUCでビルドする場合

harurobo2022のCMakeLists.txtに
# Stew
set(CMAKE_C_COMPILER "/usr/bin/gcc-9")
set(CMAKE_CXX_COMPILER "/usr/bin/g++-9")
また、コンパイラオプションの-pedantic-errorsを削除する(ROSのファイルからエラーが出てくるので。)

can_pluginsのCMakeLists.txtに
add_dependencies(${PROJECT_NAME} ${TARGET_NAME} ${catkin_EXPORTED_TARGETS})
の行を
add_dependencies(${PROJECT_NAME} ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
に変更。
(TARGET_NAMEがNUCでも田巻のPCでも空になったので、多分違うのではないかと変更)
これしなくても、Groovy以降なら(多分NUCに入っているKineticでも)target_link_librariesで依存関係を加えてくれるらしい。

上記変更を加えると、catkin_makeが通る。catkin buildはharurobo2022が通らない(can_pluginsは通る)。cmakeを読み込み続けてしまう。

・rostopic pub で/joyをパブリッシュする方法(WSLでも無理やり操作できる)
rostopic pub -1 /joy sensor_msgs/Joy "{header: auto, axes: [0,0,0,0,0,0,0,0], buttons: [0,0,0,0,0,0,0,0,0,0]}" 

・グローバル空間において、Stew_から始まる...なんていうんだろ、識別子だっけ...いろんなのの名前は田巻がマクロで使っている可能性があります。
#undefされてないのもある。Stew_static_warnとかね。もっといい実装があれば教えてください。

・レイアウト互換な型をうまいこと扱う方法を教えてください。

・型を渡したい場合(非静的メンバを持たないクラスをパラメタに渡したい場合)に、引数からの推論と組み合わせるいい感じの方法を教えてください。
ex) template<class Flag, class ... Args> void func(Args ... arg){/* 実装 */}をfunc<FlagA>(1,2,3,true,"hello");みたく呼び出したい。
